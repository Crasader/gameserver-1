// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BseRoundStart.proto

package com.xinqihd.sns.gameserver.proto;

public final class XinqiBseRoundStart {
  private XinqiBseRoundStart() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface BseRoundStartOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required string sessionId = 1;
    boolean hasSessionId();
    String getSessionId();
    
    // required int32 wind = 2;
    boolean hasWind();
    int getWind();
    
    // repeated string userId = 6;
    java.util.List<String> getUserIdList();
    int getUserIdCount();
    String getUserId(int index);
    
    // repeated int32 blood = 7;
    java.util.List<java.lang.Integer> getBloodList();
    int getBloodCount();
    int getBlood(int index);
    
    // repeated int32 strength = 8;
    java.util.List<java.lang.Integer> getStrengthList();
    int getStrengthCount();
    int getStrength(int index);
    
    // repeated int32 energy = 9;
    java.util.List<java.lang.Integer> getEnergyList();
    int getEnergyCount();
    int getEnergy(int index);
    
    // repeated int32 userMode = 10;
    java.util.List<java.lang.Integer> getUserModeList();
    int getUserModeCount();
    int getUserMode(int index);
    
    // repeated int32 posX = 11;
    java.util.List<java.lang.Integer> getPosXList();
    int getPosXCount();
    int getPosX(int index);
    
    // repeated int32 posY = 12;
    java.util.List<java.lang.Integer> getPosYList();
    int getPosYCount();
    int getPosY(int index);
    
    // required int32 boxcount = 13;
    boolean hasBoxcount();
    int getBoxcount();
    
    // repeated int32 boxindex = 14;
    java.util.List<java.lang.Integer> getBoxindexList();
    int getBoxindexCount();
    int getBoxindex(int index);
    
    // repeated int32 boxposx = 15;
    java.util.List<java.lang.Integer> getBoxposxList();
    int getBoxposxCount();
    int getBoxposx(int index);
    
    // repeated int32 boxposy = 16;
    java.util.List<java.lang.Integer> getBoxposyList();
    int getBoxposyCount();
    int getBoxposy(int index);
    
    // repeated int32 boxpropid = 17;
    java.util.List<java.lang.Integer> getBoxpropidList();
    int getBoxpropidCount();
    int getBoxpropid(int index);
    
    // repeated int32 boxpropcount = 18;
    java.util.List<java.lang.Integer> getBoxpropcountList();
    int getBoxpropcountCount();
    int getBoxpropcount(int index);
    
    // required int32 curRound = 19;
    boolean hasCurRound();
    int getCurRound();
    
    // repeated int32 campid = 20;
    java.util.List<java.lang.Integer> getCampidList();
    int getCampidCount();
    int getCampid(int index);
  }
  public static final class BseRoundStart extends
      com.google.protobuf.GeneratedMessage
      implements BseRoundStartOrBuilder {
    // Use BseRoundStart.newBuilder() to construct.
    private BseRoundStart(Builder builder) {
      super(builder);
    }
    private BseRoundStart(boolean noInit) {}
    
    private static final BseRoundStart defaultInstance;
    public static BseRoundStart getDefaultInstance() {
      return defaultInstance;
    }
    
    public BseRoundStart getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.internal_static_com_xinqihd_sns_gameserver_proto_BseRoundStart_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.internal_static_com_xinqihd_sns_gameserver_proto_BseRoundStart_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required string sessionId = 1;
    public static final int SESSIONID_FIELD_NUMBER = 1;
    private java.lang.Object sessionId_;
    public boolean hasSessionId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public String getSessionId() {
      java.lang.Object ref = sessionId_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          sessionId_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getSessionIdBytes() {
      java.lang.Object ref = sessionId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        sessionId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // required int32 wind = 2;
    public static final int WIND_FIELD_NUMBER = 2;
    private int wind_;
    public boolean hasWind() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getWind() {
      return wind_;
    }
    
    // repeated string userId = 6;
    public static final int USERID_FIELD_NUMBER = 6;
    private com.google.protobuf.LazyStringList userId_;
    public java.util.List<String>
        getUserIdList() {
      return userId_;
    }
    public int getUserIdCount() {
      return userId_.size();
    }
    public String getUserId(int index) {
      return userId_.get(index);
    }
    
    // repeated int32 blood = 7;
    public static final int BLOOD_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> blood_;
    public java.util.List<java.lang.Integer>
        getBloodList() {
      return blood_;
    }
    public int getBloodCount() {
      return blood_.size();
    }
    public int getBlood(int index) {
      return blood_.get(index);
    }
    
    // repeated int32 strength = 8;
    public static final int STRENGTH_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> strength_;
    public java.util.List<java.lang.Integer>
        getStrengthList() {
      return strength_;
    }
    public int getStrengthCount() {
      return strength_.size();
    }
    public int getStrength(int index) {
      return strength_.get(index);
    }
    
    // repeated int32 energy = 9;
    public static final int ENERGY_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> energy_;
    public java.util.List<java.lang.Integer>
        getEnergyList() {
      return energy_;
    }
    public int getEnergyCount() {
      return energy_.size();
    }
    public int getEnergy(int index) {
      return energy_.get(index);
    }
    
    // repeated int32 userMode = 10;
    public static final int USERMODE_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> userMode_;
    public java.util.List<java.lang.Integer>
        getUserModeList() {
      return userMode_;
    }
    public int getUserModeCount() {
      return userMode_.size();
    }
    public int getUserMode(int index) {
      return userMode_.get(index);
    }
    
    // repeated int32 posX = 11;
    public static final int POSX_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> posX_;
    public java.util.List<java.lang.Integer>
        getPosXList() {
      return posX_;
    }
    public int getPosXCount() {
      return posX_.size();
    }
    public int getPosX(int index) {
      return posX_.get(index);
    }
    
    // repeated int32 posY = 12;
    public static final int POSY_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> posY_;
    public java.util.List<java.lang.Integer>
        getPosYList() {
      return posY_;
    }
    public int getPosYCount() {
      return posY_.size();
    }
    public int getPosY(int index) {
      return posY_.get(index);
    }
    
    // required int32 boxcount = 13;
    public static final int BOXCOUNT_FIELD_NUMBER = 13;
    private int boxcount_;
    public boolean hasBoxcount() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getBoxcount() {
      return boxcount_;
    }
    
    // repeated int32 boxindex = 14;
    public static final int BOXINDEX_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Integer> boxindex_;
    public java.util.List<java.lang.Integer>
        getBoxindexList() {
      return boxindex_;
    }
    public int getBoxindexCount() {
      return boxindex_.size();
    }
    public int getBoxindex(int index) {
      return boxindex_.get(index);
    }
    
    // repeated int32 boxposx = 15;
    public static final int BOXPOSX_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> boxposx_;
    public java.util.List<java.lang.Integer>
        getBoxposxList() {
      return boxposx_;
    }
    public int getBoxposxCount() {
      return boxposx_.size();
    }
    public int getBoxposx(int index) {
      return boxposx_.get(index);
    }
    
    // repeated int32 boxposy = 16;
    public static final int BOXPOSY_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Integer> boxposy_;
    public java.util.List<java.lang.Integer>
        getBoxposyList() {
      return boxposy_;
    }
    public int getBoxposyCount() {
      return boxposy_.size();
    }
    public int getBoxposy(int index) {
      return boxposy_.get(index);
    }
    
    // repeated int32 boxpropid = 17;
    public static final int BOXPROPID_FIELD_NUMBER = 17;
    private java.util.List<java.lang.Integer> boxpropid_;
    public java.util.List<java.lang.Integer>
        getBoxpropidList() {
      return boxpropid_;
    }
    public int getBoxpropidCount() {
      return boxpropid_.size();
    }
    public int getBoxpropid(int index) {
      return boxpropid_.get(index);
    }
    
    // repeated int32 boxpropcount = 18;
    public static final int BOXPROPCOUNT_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Integer> boxpropcount_;
    public java.util.List<java.lang.Integer>
        getBoxpropcountList() {
      return boxpropcount_;
    }
    public int getBoxpropcountCount() {
      return boxpropcount_.size();
    }
    public int getBoxpropcount(int index) {
      return boxpropcount_.get(index);
    }
    
    // required int32 curRound = 19;
    public static final int CURROUND_FIELD_NUMBER = 19;
    private int curRound_;
    public boolean hasCurRound() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public int getCurRound() {
      return curRound_;
    }
    
    // repeated int32 campid = 20;
    public static final int CAMPID_FIELD_NUMBER = 20;
    private java.util.List<java.lang.Integer> campid_;
    public java.util.List<java.lang.Integer>
        getCampidList() {
      return campid_;
    }
    public int getCampidCount() {
      return campid_.size();
    }
    public int getCampid(int index) {
      return campid_.get(index);
    }
    
    private void initFields() {
      sessionId_ = "";
      wind_ = 0;
      userId_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      blood_ = java.util.Collections.emptyList();;
      strength_ = java.util.Collections.emptyList();;
      energy_ = java.util.Collections.emptyList();;
      userMode_ = java.util.Collections.emptyList();;
      posX_ = java.util.Collections.emptyList();;
      posY_ = java.util.Collections.emptyList();;
      boxcount_ = 0;
      boxindex_ = java.util.Collections.emptyList();;
      boxposx_ = java.util.Collections.emptyList();;
      boxposy_ = java.util.Collections.emptyList();;
      boxpropid_ = java.util.Collections.emptyList();;
      boxpropcount_ = java.util.Collections.emptyList();;
      curRound_ = 0;
      campid_ = java.util.Collections.emptyList();;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasSessionId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasWind()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBoxcount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCurRound()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getSessionIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, wind_);
      }
      for (int i = 0; i < userId_.size(); i++) {
        output.writeBytes(6, userId_.getByteString(i));
      }
      for (int i = 0; i < blood_.size(); i++) {
        output.writeInt32(7, blood_.get(i));
      }
      for (int i = 0; i < strength_.size(); i++) {
        output.writeInt32(8, strength_.get(i));
      }
      for (int i = 0; i < energy_.size(); i++) {
        output.writeInt32(9, energy_.get(i));
      }
      for (int i = 0; i < userMode_.size(); i++) {
        output.writeInt32(10, userMode_.get(i));
      }
      for (int i = 0; i < posX_.size(); i++) {
        output.writeInt32(11, posX_.get(i));
      }
      for (int i = 0; i < posY_.size(); i++) {
        output.writeInt32(12, posY_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(13, boxcount_);
      }
      for (int i = 0; i < boxindex_.size(); i++) {
        output.writeInt32(14, boxindex_.get(i));
      }
      for (int i = 0; i < boxposx_.size(); i++) {
        output.writeInt32(15, boxposx_.get(i));
      }
      for (int i = 0; i < boxposy_.size(); i++) {
        output.writeInt32(16, boxposy_.get(i));
      }
      for (int i = 0; i < boxpropid_.size(); i++) {
        output.writeInt32(17, boxpropid_.get(i));
      }
      for (int i = 0; i < boxpropcount_.size(); i++) {
        output.writeInt32(18, boxpropcount_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(19, curRound_);
      }
      for (int i = 0; i < campid_.size(); i++) {
        output.writeInt32(20, campid_.get(i));
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getSessionIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, wind_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userId_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(userId_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getUserIdList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < blood_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(blood_.get(i));
        }
        size += dataSize;
        size += 1 * getBloodList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < strength_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(strength_.get(i));
        }
        size += dataSize;
        size += 1 * getStrengthList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < energy_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(energy_.get(i));
        }
        size += dataSize;
        size += 1 * getEnergyList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userMode_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userMode_.get(i));
        }
        size += dataSize;
        size += 1 * getUserModeList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < posX_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(posX_.get(i));
        }
        size += dataSize;
        size += 1 * getPosXList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < posY_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(posY_.get(i));
        }
        size += dataSize;
        size += 1 * getPosYList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, boxcount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < boxindex_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(boxindex_.get(i));
        }
        size += dataSize;
        size += 1 * getBoxindexList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < boxposx_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(boxposx_.get(i));
        }
        size += dataSize;
        size += 1 * getBoxposxList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < boxposy_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(boxposy_.get(i));
        }
        size += dataSize;
        size += 2 * getBoxposyList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < boxpropid_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(boxpropid_.get(i));
        }
        size += dataSize;
        size += 2 * getBoxpropidList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < boxpropcount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(boxpropcount_.get(i));
        }
        size += dataSize;
        size += 2 * getBoxpropcountList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, curRound_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < campid_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(campid_.get(i));
        }
        size += dataSize;
        size += 2 * getCampidList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStartOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.internal_static_com_xinqihd_sns_gameserver_proto_BseRoundStart_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.internal_static_com_xinqihd_sns_gameserver_proto_BseRoundStart_fieldAccessorTable;
      }
      
      // Construct using com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        sessionId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        wind_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        userId_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        blood_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000008);
        strength_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000010);
        energy_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000020);
        userMode_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000040);
        posX_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000080);
        posY_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000100);
        boxcount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        boxindex_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000400);
        boxposx_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000800);
        boxposy_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00001000);
        boxpropid_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00002000);
        boxpropcount_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00004000);
        curRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        campid_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart.getDescriptor();
      }
      
      public com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart getDefaultInstanceForType() {
        return com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart.getDefaultInstance();
      }
      
      public com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart build() {
        com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart buildPartial() {
        com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart result = new com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.sessionId_ = sessionId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.wind_ = wind_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          userId_ = new com.google.protobuf.UnmodifiableLazyStringList(
              userId_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.userId_ = userId_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          blood_ = java.util.Collections.unmodifiableList(blood_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.blood_ = blood_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          strength_ = java.util.Collections.unmodifiableList(strength_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.strength_ = strength_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          energy_ = java.util.Collections.unmodifiableList(energy_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.energy_ = energy_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          userMode_ = java.util.Collections.unmodifiableList(userMode_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.userMode_ = userMode_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          posX_ = java.util.Collections.unmodifiableList(posX_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.posX_ = posX_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          posY_ = java.util.Collections.unmodifiableList(posY_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.posY_ = posY_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000004;
        }
        result.boxcount_ = boxcount_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          boxindex_ = java.util.Collections.unmodifiableList(boxindex_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.boxindex_ = boxindex_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          boxposx_ = java.util.Collections.unmodifiableList(boxposx_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.boxposx_ = boxposx_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          boxposy_ = java.util.Collections.unmodifiableList(boxposy_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.boxposy_ = boxposy_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          boxpropid_ = java.util.Collections.unmodifiableList(boxpropid_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.boxpropid_ = boxpropid_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          boxpropcount_ = java.util.Collections.unmodifiableList(boxpropcount_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.boxpropcount_ = boxpropcount_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000008;
        }
        result.curRound_ = curRound_;
        if (((bitField0_ & 0x00010000) == 0x00010000)) {
          campid_ = java.util.Collections.unmodifiableList(campid_);
          bitField0_ = (bitField0_ & ~0x00010000);
        }
        result.campid_ = campid_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart) {
          return mergeFrom((com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart other) {
        if (other == com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart.getDefaultInstance()) return this;
        if (other.hasSessionId()) {
          setSessionId(other.getSessionId());
        }
        if (other.hasWind()) {
          setWind(other.getWind());
        }
        if (!other.userId_.isEmpty()) {
          if (userId_.isEmpty()) {
            userId_ = other.userId_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureUserIdIsMutable();
            userId_.addAll(other.userId_);
          }
          onChanged();
        }
        if (!other.blood_.isEmpty()) {
          if (blood_.isEmpty()) {
            blood_ = other.blood_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureBloodIsMutable();
            blood_.addAll(other.blood_);
          }
          onChanged();
        }
        if (!other.strength_.isEmpty()) {
          if (strength_.isEmpty()) {
            strength_ = other.strength_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureStrengthIsMutable();
            strength_.addAll(other.strength_);
          }
          onChanged();
        }
        if (!other.energy_.isEmpty()) {
          if (energy_.isEmpty()) {
            energy_ = other.energy_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureEnergyIsMutable();
            energy_.addAll(other.energy_);
          }
          onChanged();
        }
        if (!other.userMode_.isEmpty()) {
          if (userMode_.isEmpty()) {
            userMode_ = other.userMode_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureUserModeIsMutable();
            userMode_.addAll(other.userMode_);
          }
          onChanged();
        }
        if (!other.posX_.isEmpty()) {
          if (posX_.isEmpty()) {
            posX_ = other.posX_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensurePosXIsMutable();
            posX_.addAll(other.posX_);
          }
          onChanged();
        }
        if (!other.posY_.isEmpty()) {
          if (posY_.isEmpty()) {
            posY_ = other.posY_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensurePosYIsMutable();
            posY_.addAll(other.posY_);
          }
          onChanged();
        }
        if (other.hasBoxcount()) {
          setBoxcount(other.getBoxcount());
        }
        if (!other.boxindex_.isEmpty()) {
          if (boxindex_.isEmpty()) {
            boxindex_ = other.boxindex_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureBoxindexIsMutable();
            boxindex_.addAll(other.boxindex_);
          }
          onChanged();
        }
        if (!other.boxposx_.isEmpty()) {
          if (boxposx_.isEmpty()) {
            boxposx_ = other.boxposx_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureBoxposxIsMutable();
            boxposx_.addAll(other.boxposx_);
          }
          onChanged();
        }
        if (!other.boxposy_.isEmpty()) {
          if (boxposy_.isEmpty()) {
            boxposy_ = other.boxposy_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureBoxposyIsMutable();
            boxposy_.addAll(other.boxposy_);
          }
          onChanged();
        }
        if (!other.boxpropid_.isEmpty()) {
          if (boxpropid_.isEmpty()) {
            boxpropid_ = other.boxpropid_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureBoxpropidIsMutable();
            boxpropid_.addAll(other.boxpropid_);
          }
          onChanged();
        }
        if (!other.boxpropcount_.isEmpty()) {
          if (boxpropcount_.isEmpty()) {
            boxpropcount_ = other.boxpropcount_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureBoxpropcountIsMutable();
            boxpropcount_.addAll(other.boxpropcount_);
          }
          onChanged();
        }
        if (other.hasCurRound()) {
          setCurRound(other.getCurRound());
        }
        if (!other.campid_.isEmpty()) {
          if (campid_.isEmpty()) {
            campid_ = other.campid_;
            bitField0_ = (bitField0_ & ~0x00010000);
          } else {
            ensureCampidIsMutable();
            campid_.addAll(other.campid_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasSessionId()) {
          
          return false;
        }
        if (!hasWind()) {
          
          return false;
        }
        if (!hasBoxcount()) {
          
          return false;
        }
        if (!hasCurRound()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              sessionId_ = input.readBytes();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              wind_ = input.readInt32();
              break;
            }
            case 50: {
              ensureUserIdIsMutable();
              userId_.add(input.readBytes());
              break;
            }
            case 56: {
              ensureBloodIsMutable();
              blood_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addBlood(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              ensureStrengthIsMutable();
              strength_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addStrength(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              ensureEnergyIsMutable();
              energy_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addEnergy(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              ensureUserModeIsMutable();
              userMode_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addUserMode(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              ensurePosXIsMutable();
              posX_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addPosX(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              ensurePosYIsMutable();
              posY_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addPosY(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              bitField0_ |= 0x00000200;
              boxcount_ = input.readInt32();
              break;
            }
            case 112: {
              ensureBoxindexIsMutable();
              boxindex_.add(input.readInt32());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addBoxindex(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 120: {
              ensureBoxposxIsMutable();
              boxposx_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addBoxposx(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 128: {
              ensureBoxposyIsMutable();
              boxposy_.add(input.readInt32());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addBoxposy(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 136: {
              ensureBoxpropidIsMutable();
              boxpropid_.add(input.readInt32());
              break;
            }
            case 138: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addBoxpropid(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 144: {
              ensureBoxpropcountIsMutable();
              boxpropcount_.add(input.readInt32());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addBoxpropcount(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 152: {
              bitField0_ |= 0x00008000;
              curRound_ = input.readInt32();
              break;
            }
            case 160: {
              ensureCampidIsMutable();
              campid_.add(input.readInt32());
              break;
            }
            case 162: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addCampid(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required string sessionId = 1;
      private java.lang.Object sessionId_ = "";
      public boolean hasSessionId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public String getSessionId() {
        java.lang.Object ref = sessionId_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          sessionId_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setSessionId(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        sessionId_ = value;
        onChanged();
        return this;
      }
      public Builder clearSessionId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        sessionId_ = getDefaultInstance().getSessionId();
        onChanged();
        return this;
      }
      void setSessionId(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000001;
        sessionId_ = value;
        onChanged();
      }
      
      // required int32 wind = 2;
      private int wind_ ;
      public boolean hasWind() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getWind() {
        return wind_;
      }
      public Builder setWind(int value) {
        bitField0_ |= 0x00000002;
        wind_ = value;
        onChanged();
        return this;
      }
      public Builder clearWind() {
        bitField0_ = (bitField0_ & ~0x00000002);
        wind_ = 0;
        onChanged();
        return this;
      }
      
      // repeated string userId = 6;
      private com.google.protobuf.LazyStringList userId_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureUserIdIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          userId_ = new com.google.protobuf.LazyStringArrayList(userId_);
          bitField0_ |= 0x00000004;
         }
      }
      public java.util.List<String>
          getUserIdList() {
        return java.util.Collections.unmodifiableList(userId_);
      }
      public int getUserIdCount() {
        return userId_.size();
      }
      public String getUserId(int index) {
        return userId_.get(index);
      }
      public Builder setUserId(
          int index, String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureUserIdIsMutable();
        userId_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addUserId(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureUserIdIsMutable();
        userId_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllUserId(
          java.lang.Iterable<String> values) {
        ensureUserIdIsMutable();
        super.addAll(values, userId_);
        onChanged();
        return this;
      }
      public Builder clearUserId() {
        userId_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      void addUserId(com.google.protobuf.ByteString value) {
        ensureUserIdIsMutable();
        userId_.add(value);
        onChanged();
      }
      
      // repeated int32 blood = 7;
      private java.util.List<java.lang.Integer> blood_ = java.util.Collections.emptyList();;
      private void ensureBloodIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          blood_ = new java.util.ArrayList<java.lang.Integer>(blood_);
          bitField0_ |= 0x00000008;
         }
      }
      public java.util.List<java.lang.Integer>
          getBloodList() {
        return java.util.Collections.unmodifiableList(blood_);
      }
      public int getBloodCount() {
        return blood_.size();
      }
      public int getBlood(int index) {
        return blood_.get(index);
      }
      public Builder setBlood(
          int index, int value) {
        ensureBloodIsMutable();
        blood_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addBlood(int value) {
        ensureBloodIsMutable();
        blood_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllBlood(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBloodIsMutable();
        super.addAll(values, blood_);
        onChanged();
        return this;
      }
      public Builder clearBlood() {
        blood_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      
      // repeated int32 strength = 8;
      private java.util.List<java.lang.Integer> strength_ = java.util.Collections.emptyList();;
      private void ensureStrengthIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          strength_ = new java.util.ArrayList<java.lang.Integer>(strength_);
          bitField0_ |= 0x00000010;
         }
      }
      public java.util.List<java.lang.Integer>
          getStrengthList() {
        return java.util.Collections.unmodifiableList(strength_);
      }
      public int getStrengthCount() {
        return strength_.size();
      }
      public int getStrength(int index) {
        return strength_.get(index);
      }
      public Builder setStrength(
          int index, int value) {
        ensureStrengthIsMutable();
        strength_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addStrength(int value) {
        ensureStrengthIsMutable();
        strength_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllStrength(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureStrengthIsMutable();
        super.addAll(values, strength_);
        onChanged();
        return this;
      }
      public Builder clearStrength() {
        strength_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }
      
      // repeated int32 energy = 9;
      private java.util.List<java.lang.Integer> energy_ = java.util.Collections.emptyList();;
      private void ensureEnergyIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          energy_ = new java.util.ArrayList<java.lang.Integer>(energy_);
          bitField0_ |= 0x00000020;
         }
      }
      public java.util.List<java.lang.Integer>
          getEnergyList() {
        return java.util.Collections.unmodifiableList(energy_);
      }
      public int getEnergyCount() {
        return energy_.size();
      }
      public int getEnergy(int index) {
        return energy_.get(index);
      }
      public Builder setEnergy(
          int index, int value) {
        ensureEnergyIsMutable();
        energy_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addEnergy(int value) {
        ensureEnergyIsMutable();
        energy_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllEnergy(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEnergyIsMutable();
        super.addAll(values, energy_);
        onChanged();
        return this;
      }
      public Builder clearEnergy() {
        energy_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }
      
      // repeated int32 userMode = 10;
      private java.util.List<java.lang.Integer> userMode_ = java.util.Collections.emptyList();;
      private void ensureUserModeIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          userMode_ = new java.util.ArrayList<java.lang.Integer>(userMode_);
          bitField0_ |= 0x00000040;
         }
      }
      public java.util.List<java.lang.Integer>
          getUserModeList() {
        return java.util.Collections.unmodifiableList(userMode_);
      }
      public int getUserModeCount() {
        return userMode_.size();
      }
      public int getUserMode(int index) {
        return userMode_.get(index);
      }
      public Builder setUserMode(
          int index, int value) {
        ensureUserModeIsMutable();
        userMode_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addUserMode(int value) {
        ensureUserModeIsMutable();
        userMode_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllUserMode(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserModeIsMutable();
        super.addAll(values, userMode_);
        onChanged();
        return this;
      }
      public Builder clearUserMode() {
        userMode_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }
      
      // repeated int32 posX = 11;
      private java.util.List<java.lang.Integer> posX_ = java.util.Collections.emptyList();;
      private void ensurePosXIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          posX_ = new java.util.ArrayList<java.lang.Integer>(posX_);
          bitField0_ |= 0x00000080;
         }
      }
      public java.util.List<java.lang.Integer>
          getPosXList() {
        return java.util.Collections.unmodifiableList(posX_);
      }
      public int getPosXCount() {
        return posX_.size();
      }
      public int getPosX(int index) {
        return posX_.get(index);
      }
      public Builder setPosX(
          int index, int value) {
        ensurePosXIsMutable();
        posX_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addPosX(int value) {
        ensurePosXIsMutable();
        posX_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllPosX(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePosXIsMutable();
        super.addAll(values, posX_);
        onChanged();
        return this;
      }
      public Builder clearPosX() {
        posX_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }
      
      // repeated int32 posY = 12;
      private java.util.List<java.lang.Integer> posY_ = java.util.Collections.emptyList();;
      private void ensurePosYIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          posY_ = new java.util.ArrayList<java.lang.Integer>(posY_);
          bitField0_ |= 0x00000100;
         }
      }
      public java.util.List<java.lang.Integer>
          getPosYList() {
        return java.util.Collections.unmodifiableList(posY_);
      }
      public int getPosYCount() {
        return posY_.size();
      }
      public int getPosY(int index) {
        return posY_.get(index);
      }
      public Builder setPosY(
          int index, int value) {
        ensurePosYIsMutable();
        posY_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addPosY(int value) {
        ensurePosYIsMutable();
        posY_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllPosY(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePosYIsMutable();
        super.addAll(values, posY_);
        onChanged();
        return this;
      }
      public Builder clearPosY() {
        posY_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }
      
      // required int32 boxcount = 13;
      private int boxcount_ ;
      public boolean hasBoxcount() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      public int getBoxcount() {
        return boxcount_;
      }
      public Builder setBoxcount(int value) {
        bitField0_ |= 0x00000200;
        boxcount_ = value;
        onChanged();
        return this;
      }
      public Builder clearBoxcount() {
        bitField0_ = (bitField0_ & ~0x00000200);
        boxcount_ = 0;
        onChanged();
        return this;
      }
      
      // repeated int32 boxindex = 14;
      private java.util.List<java.lang.Integer> boxindex_ = java.util.Collections.emptyList();;
      private void ensureBoxindexIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          boxindex_ = new java.util.ArrayList<java.lang.Integer>(boxindex_);
          bitField0_ |= 0x00000400;
         }
      }
      public java.util.List<java.lang.Integer>
          getBoxindexList() {
        return java.util.Collections.unmodifiableList(boxindex_);
      }
      public int getBoxindexCount() {
        return boxindex_.size();
      }
      public int getBoxindex(int index) {
        return boxindex_.get(index);
      }
      public Builder setBoxindex(
          int index, int value) {
        ensureBoxindexIsMutable();
        boxindex_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addBoxindex(int value) {
        ensureBoxindexIsMutable();
        boxindex_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllBoxindex(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBoxindexIsMutable();
        super.addAll(values, boxindex_);
        onChanged();
        return this;
      }
      public Builder clearBoxindex() {
        boxindex_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }
      
      // repeated int32 boxposx = 15;
      private java.util.List<java.lang.Integer> boxposx_ = java.util.Collections.emptyList();;
      private void ensureBoxposxIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          boxposx_ = new java.util.ArrayList<java.lang.Integer>(boxposx_);
          bitField0_ |= 0x00000800;
         }
      }
      public java.util.List<java.lang.Integer>
          getBoxposxList() {
        return java.util.Collections.unmodifiableList(boxposx_);
      }
      public int getBoxposxCount() {
        return boxposx_.size();
      }
      public int getBoxposx(int index) {
        return boxposx_.get(index);
      }
      public Builder setBoxposx(
          int index, int value) {
        ensureBoxposxIsMutable();
        boxposx_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addBoxposx(int value) {
        ensureBoxposxIsMutable();
        boxposx_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllBoxposx(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBoxposxIsMutable();
        super.addAll(values, boxposx_);
        onChanged();
        return this;
      }
      public Builder clearBoxposx() {
        boxposx_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }
      
      // repeated int32 boxposy = 16;
      private java.util.List<java.lang.Integer> boxposy_ = java.util.Collections.emptyList();;
      private void ensureBoxposyIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          boxposy_ = new java.util.ArrayList<java.lang.Integer>(boxposy_);
          bitField0_ |= 0x00001000;
         }
      }
      public java.util.List<java.lang.Integer>
          getBoxposyList() {
        return java.util.Collections.unmodifiableList(boxposy_);
      }
      public int getBoxposyCount() {
        return boxposy_.size();
      }
      public int getBoxposy(int index) {
        return boxposy_.get(index);
      }
      public Builder setBoxposy(
          int index, int value) {
        ensureBoxposyIsMutable();
        boxposy_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addBoxposy(int value) {
        ensureBoxposyIsMutable();
        boxposy_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllBoxposy(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBoxposyIsMutable();
        super.addAll(values, boxposy_);
        onChanged();
        return this;
      }
      public Builder clearBoxposy() {
        boxposy_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }
      
      // repeated int32 boxpropid = 17;
      private java.util.List<java.lang.Integer> boxpropid_ = java.util.Collections.emptyList();;
      private void ensureBoxpropidIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          boxpropid_ = new java.util.ArrayList<java.lang.Integer>(boxpropid_);
          bitField0_ |= 0x00002000;
         }
      }
      public java.util.List<java.lang.Integer>
          getBoxpropidList() {
        return java.util.Collections.unmodifiableList(boxpropid_);
      }
      public int getBoxpropidCount() {
        return boxpropid_.size();
      }
      public int getBoxpropid(int index) {
        return boxpropid_.get(index);
      }
      public Builder setBoxpropid(
          int index, int value) {
        ensureBoxpropidIsMutable();
        boxpropid_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addBoxpropid(int value) {
        ensureBoxpropidIsMutable();
        boxpropid_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllBoxpropid(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBoxpropidIsMutable();
        super.addAll(values, boxpropid_);
        onChanged();
        return this;
      }
      public Builder clearBoxpropid() {
        boxpropid_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }
      
      // repeated int32 boxpropcount = 18;
      private java.util.List<java.lang.Integer> boxpropcount_ = java.util.Collections.emptyList();;
      private void ensureBoxpropcountIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          boxpropcount_ = new java.util.ArrayList<java.lang.Integer>(boxpropcount_);
          bitField0_ |= 0x00004000;
         }
      }
      public java.util.List<java.lang.Integer>
          getBoxpropcountList() {
        return java.util.Collections.unmodifiableList(boxpropcount_);
      }
      public int getBoxpropcountCount() {
        return boxpropcount_.size();
      }
      public int getBoxpropcount(int index) {
        return boxpropcount_.get(index);
      }
      public Builder setBoxpropcount(
          int index, int value) {
        ensureBoxpropcountIsMutable();
        boxpropcount_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addBoxpropcount(int value) {
        ensureBoxpropcountIsMutable();
        boxpropcount_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllBoxpropcount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBoxpropcountIsMutable();
        super.addAll(values, boxpropcount_);
        onChanged();
        return this;
      }
      public Builder clearBoxpropcount() {
        boxpropcount_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }
      
      // required int32 curRound = 19;
      private int curRound_ ;
      public boolean hasCurRound() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      public int getCurRound() {
        return curRound_;
      }
      public Builder setCurRound(int value) {
        bitField0_ |= 0x00008000;
        curRound_ = value;
        onChanged();
        return this;
      }
      public Builder clearCurRound() {
        bitField0_ = (bitField0_ & ~0x00008000);
        curRound_ = 0;
        onChanged();
        return this;
      }
      
      // repeated int32 campid = 20;
      private java.util.List<java.lang.Integer> campid_ = java.util.Collections.emptyList();;
      private void ensureCampidIsMutable() {
        if (!((bitField0_ & 0x00010000) == 0x00010000)) {
          campid_ = new java.util.ArrayList<java.lang.Integer>(campid_);
          bitField0_ |= 0x00010000;
         }
      }
      public java.util.List<java.lang.Integer>
          getCampidList() {
        return java.util.Collections.unmodifiableList(campid_);
      }
      public int getCampidCount() {
        return campid_.size();
      }
      public int getCampid(int index) {
        return campid_.get(index);
      }
      public Builder setCampid(
          int index, int value) {
        ensureCampidIsMutable();
        campid_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addCampid(int value) {
        ensureCampidIsMutable();
        campid_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllCampid(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCampidIsMutable();
        super.addAll(values, campid_);
        onChanged();
        return this;
      }
      public Builder clearCampid() {
        campid_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00010000);
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.xinqihd.sns.gameserver.proto.BseRoundStart)
    }
    
    static {
      defaultInstance = new BseRoundStart(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.xinqihd.sns.gameserver.proto.BseRoundStart)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_xinqihd_sns_gameserver_proto_BseRoundStart_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_xinqihd_sns_gameserver_proto_BseRoundStart_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\023BseRoundStart.proto\022 com.xinqihd.sns.g" +
      "ameserver.proto\"\260\002\n\rBseRoundStart\022\021\n\tses" +
      "sionId\030\001 \002(\t\022\014\n\004wind\030\002 \002(\005\022\016\n\006userId\030\006 \003" +
      "(\t\022\r\n\005blood\030\007 \003(\005\022\020\n\010strength\030\010 \003(\005\022\016\n\006e" +
      "nergy\030\t \003(\005\022\020\n\010userMode\030\n \003(\005\022\014\n\004posX\030\013 " +
      "\003(\005\022\014\n\004posY\030\014 \003(\005\022\020\n\010boxcount\030\r \002(\005\022\020\n\010b" +
      "oxindex\030\016 \003(\005\022\017\n\007boxposx\030\017 \003(\005\022\017\n\007boxpos" +
      "y\030\020 \003(\005\022\021\n\tboxpropid\030\021 \003(\005\022\024\n\014boxpropcou" +
      "nt\030\022 \003(\005\022\020\n\010curRound\030\023 \002(\005\022\016\n\006campid\030\024 \003" +
      "(\005B\024B\022XinqiBseRoundStart"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_com_xinqihd_sns_gameserver_proto_BseRoundStart_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_com_xinqihd_sns_gameserver_proto_BseRoundStart_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_xinqihd_sns_gameserver_proto_BseRoundStart_descriptor,
              new java.lang.String[] { "SessionId", "Wind", "UserId", "Blood", "Strength", "Energy", "UserMode", "PosX", "PosY", "Boxcount", "Boxindex", "Boxposx", "Boxposy", "Boxpropid", "Boxpropcount", "CurRound", "Campid", },
              com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart.class,
              com.xinqihd.sns.gameserver.proto.XinqiBseRoundStart.BseRoundStart.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
